@page "/setlists/editor/{SetlistId:int}"
@using Onlab.Transfer
@using MudBlazor
@using Onlab.Api

@inject ISetlistsClient SetlistsClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (_setlistModel == null)
    {
        <MudAlert Severity="Severity.Error">Setlist with ID @SetlistId not found.</MudAlert>
        <MudButton Variant="Variant.Filled" OnClick="@(() => NavigationManager.NavigateTo("/setlists"))" Class="mt-4">Back to Setlists</MudButton>
    }
    else
    {
        <MudText Typo="Typo.h4" GutterBottom="true">Editing Song Content for: <MudText Typo="Typo.h4" Component="span" Color="Color.Primary">@_setlistModel.Name</MudText></MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-2">Band: @_setlistModel.BandName</MudText>
        @if (_setlistModel.Concert != null)
        {
            <MudText Typo="Typo.subtitle2" Class="mb-4">Linked Concert: @_setlistModel.Concert.Venue on @_setlistModel.Concert.Date.ToShortDateString()</MudText>
        }

        <MudPaper Elevation="3" Class="pa-4">
            <MudText Typo="Typo.h6" GutterBottom="true">Setlist Content (Songs)</MudText>
            <MudTextField @bind-Value="_setlistModel.Description"
                          Label="Songs (typically one song per line, including order)"
                          Lines="20"
                          Variant="Variant.Outlined"
                          HelperText="Enter/edit your songs here. The order and formatting are preserved as plain text."
                          Immediate="true" />
        </MudPaper>

        <div Class="mt-4 d-flex">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Disabled="@_saving" Class="mr-2">
                @if (_saving)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                    <span>Saving...</span>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-1" />
                    <span>Save Song Content</span>
                }
            </MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="@(() => NavigationManager.NavigateTo("/setlists"))" Disabled="@_saving">Cancel & Back to List</MudButton>
        </div>
    }
</MudContainer>

@code {
    [Parameter]
    public int SetlistId { get; set; }

    private SetlistData? _setlistModel;
    private bool _loading = true;
    private bool _saving = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            // Ideally, you'd have a GetSetlistByIdAsync. Using workaround:
            var allSetlists = await SetlistsClient.GetSetlistsAsync() ?? new List<SetlistData>();
            _setlistModel = allSetlists.FirstOrDefault(s => s.Id == SetlistId);

            if (_setlistModel == null)
            {
                Snackbar.Add($"Setlist with ID {SetlistId} not found.", Severity.Error);
                NavigationManager.NavigateTo("/setlists");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading setlist: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/setlists");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SaveChanges()
    {
        if (_setlistModel == null) return;
        _saving = true;

        try
        {
            await SetlistsClient.UpdateSetlistAsync(_setlistModel.Id, _setlistModel);
            Snackbar.Add("Setlist content saved successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving setlist: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }
}