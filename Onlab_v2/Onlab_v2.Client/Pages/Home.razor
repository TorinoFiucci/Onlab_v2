@page "/"
@using Onlab.Transfer
@using Onlab.Api
@using Onlab.Dal.Entities
@using MudBlazor
@using System.Linq

@inject IConcertsClient ConcertsClient
@inject ITaskItemsClient TaskItemsClient
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Welcome to Your Music Hub!</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-6" Align="Align.Center">Here's a quick overview of what's happening.</MudText>

    <MudGrid Spacing="3">
        @* Upcoming Concerts Section *@
        <MudItem xs="12" md="7">
            <MudPaper Elevation="3" Class="pa-4" Height="100%">
                <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-3">🎸 Upcoming Concerts</MudText>
                @if (_loadingConcerts)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else if (_upcomingConcerts == null || !_upcomingConcerts.Any())
                {
                    <MudAlert Severity="Severity.Info" Dense="true">No upcoming concerts scheduled yet. <MudLink Href="/concerts">Schedule one now!</MudLink></MudAlert>
                }
                else
                {
                    <MudGrid Spacing="2">
                        @foreach (var concert in _upcomingConcerts.Take(3)) // Show top 3 upcoming
                        {
                            <MudItem xs="12" sm="6" md="12">
                                <MudCard Outlined="true">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@concert.Venue</MudText>
                                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">@concert.BandName</MudText>
                                        </CardHeaderContent>
                                       @*  <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.Event" Color="Color.Default" Link="@($"/bands/details/{concert.BandId}")" Title="View Band Details"/>
                                        </CardHeaderActions> *@
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText Typo="Typo.body2"><strong>Date:</strong> @concert.Date.ToString("dddd, MMMM dd, yyyy 'at' HH:mm")</MudText>
                                        @if (concert.Setlist != null && !string.IsNullOrEmpty(concert.Setlist.Name))
                                        {
                                            <MudText Typo="Typo.body2"><strong>Setlist:</strong> 
                                                <MudLink Href="@($"/setlists/editor/{concert.Setlist.Id}")">@concert.Setlist.Name</MudLink>
                                            </MudText>
                                        }
                                        @if (!string.IsNullOrEmpty(concert.Contact))
                                        {
                                            <MudText Typo="Typo.caption" Class="mt-1">Contact: @concert.Contact</MudText>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                        @if (_upcomingConcerts.Count() > 3)
                        {
                            <MudItem xs="12" Class="mt-2">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/concerts" FullWidth="true">View All Upcoming Concerts</MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudPaper>
        </MudItem>

        @* Active Tasks Section *@
        <MudItem xs="12" md="5">
            <MudPaper Elevation="3" Class="pa-4" Height="100%">
                <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-3">📝 Active Tasks</MudText>
                @if (_loadingTasks)
                {
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                }
                else if (_activeTasks == null || !_activeTasks.Any())
                {
                    <MudAlert Severity="Severity.Info" Dense="true">No active tasks. <MudLink Href="/tasks">Create some tasks!</MudLink></MudAlert>
                }
                else
                {
                    <MudList T="TaskItemData" Clickable="false" Dense="true">
                        @foreach (var task in _activeTasks.Take(5)) // Show top 5 active tasks
                        {
                            <MudListItem Icon="@GetTaskIcon(task.Status)" IconColor="@GetTaskIconColor(task.Status)">
                                <div class="d-flex flex-column" style="width:100%;">
                                    <MudText Typo="Typo.body1">@task.Description</MudText>
                                    <div class="d-flex justify-space-between align-center mt-1">
                                        <MudText Typo="Typo.caption">
                                            Due: @(task.DueDate.HasValue ? task.DueDate.Value.ToShortDateString() : "N/A")
                                            @if (task.User != null) {
                                                <span class="ml-2">| Assignee: @task.User.Name</span>
                                            }
                                        </MudText>
                                        <MudChip Size="Size.Small" Variant="Variant.Outlined" Color="@GetTaskStatusColor(task.Status)">@task.Status.ToString()</MudChip>
                                    </div>
                                </div>
                            </MudListItem>
                            <MudDivider />
                        }
                         @if (_activeTasks.Count() > 5)
                        {
                            <MudListItem>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/tasks" FullWidth="true">View All Tasks</MudButton>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<ConcertData>? _upcomingConcerts;
    private IEnumerable<TaskItemData>? _activeTasks;
    private bool _loadingConcerts = true;
    private bool _loadingTasks = true;

    protected override async Task OnInitializedAsync()
    {
        _loadingConcerts = true;
        _loadingTasks = true;

        var concertsTask = LoadUpcomingConcerts();
        var tasksTask = LoadActiveTasks();

        await Task.WhenAll(concertsTask, tasksTask);

        _loadingConcerts = false;
        _loadingTasks = false;
    }

    private async Task LoadUpcomingConcerts()
    {
        try
        {
            var allConcerts = await ConcertsClient.GetConcertsAsync() ?? new List<ConcertData>();
            _upcomingConcerts = allConcerts
                                .Where(c => c.Date.Date >= DateTime.Today)
                                .OrderBy(c => c.Date)
                                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading concerts: {ex.Message}"); // Log error
            _upcomingConcerts = new List<ConcertData>(); // Default to empty list on error
        }
    }

    private async Task LoadActiveTasks()
    {
        try
        {
            var allTasks = await TaskItemsClient.GetTaskItemsAsync() ?? new List<TaskItemData>();
            _activeTasks = allTasks
                            .Where(t => t.Status == TaskItemStatus.New || t.Status == TaskItemStatus.InProgress)
                            .OrderBy(t => t.DueDate ?? DateTime.MaxValue) // Sort by DueDate, tasks without due date last
                            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}"); // Log error
            _activeTasks = new List<TaskItemData>(); // Default to empty list on error
        }
    }

    private Color GetTaskStatusColor(TaskItemStatus status) => status switch
    {
        TaskItemStatus.New => Color.Info,
        TaskItemStatus.InProgress => Color.Warning,
        TaskItemStatus.Done => Color.Success,
        _ => Color.Default
    };

    private string GetTaskIcon(TaskItemStatus status) => status switch
    {
        TaskItemStatus.New => Icons.Material.Filled.FiberNew,
        TaskItemStatus.InProgress => Icons.Material.Filled.DonutLarge,
        TaskItemStatus.Done => Icons.Material.Filled.CheckCircle,
        _ => Icons.Material.Filled.Task
    };

    private Color GetTaskIconColor(TaskItemStatus status) => GetTaskStatusColor(status); // Can be same as chip color or different
}