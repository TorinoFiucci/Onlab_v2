@page "/"
@inject ITaskItemsClient TaskItemsClient
@inject HttpClient _MyApi

@inject ISnackbar Snackbar

@using Onlab.Transfer
@using Onlab.Dal.Entities
@using Onlab.Api
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@using System.Text.Json

@foreach(var item in taskItems)
{
	<MudCard>
		<MudCardContent>
			<MudText>@item.Description</MudText>
			<MudText Typo="Typo.body2">@item.DueDate</MudText>
			<MudText Typo="Typo.body2">@item.Status</MudText>
			<MudText Typo="Typo.body2">@item.User?.Name</MudText>
		</MudCardContent>
	</MudCard>
}


@code {
	private IList<TaskItemData> taskItems = new List<TaskItemData>();
	//private TaskItemData newTaskItem = new TaskItemData();
	//private bool isLoading = true;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			taskItems = await _MyApi.GetFromJsonAsync<IList<TaskItemData>>("/api/TaskItems");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error loading tasks: {ex.Message}", Severity.Error);
		}
		finally
		{
			//isLoading = false;
		}
	}
	// private async Task AddTaskItem()
	// {
	// 	if (string.IsNullOrWhiteSpace(newTaskItem.Description))
	// 	{
	// 		Snackbar.Add("Task title cannot be empty.", Severity.Warning);
	// 		return;
	// 	}
	// 	try
	// 	{
	// 		var createdTask = await TaskItemsClient.CreateTaskItemAsync(newTaskItem);
	// 		taskItems.Add(createdTask);
	// 		newTaskItem = new TaskItem(); // Reset the input field
	// 		Snackbar.Add("Task added successfully.", Severity.Success);
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Snackbar.Add($"Error adding task: {ex.Message}", Severity.Error);
	// 	}
	// }
}
	