@using Onlab.Transfer
@using Onlab.Api
@using MudBlazor

@inject IConcertsClient ConcertsClient
@inject IBandsClient BandsClient
@inject ISnackbar Snackbar

<MudDialog Style=" min-height: 480px;">
    <TitleContent>
        <MudText Typo="Typo.h6">@_title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_isValid" Model="@_formModel">
            <MudTextField @bind-Value="_formModel.Venue" For="@(() => _formModel.Venue)"
                          Label="Venue" Required="true" RequiredError="Venue is required." />

            <MudGrid Spacing="2">
                <MudItem xs="12" sm="7">
                    <MudDatePicker @bind-Date="_formModel.SelectedDate" For="@(() => _formModel.SelectedDate)"
                                   Label="Concert Date" Required="true" RequiredError="Date is required." Editable="true"
                                   Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudTimePicker @bind-Time="_formModel.SelectedTime" For="@(() => _formModel.SelectedTime)"
                                   Label="Concert Time" Required="true" RequiredError="Time is required." Editable="true"
                                   AmPm="false" 
                                   PickerVariant="PickerVariant.Dialog"
                                   Variant="Variant.Text" /> @* Or Dialog *@
                </MudItem>
            </MudGrid>

            <MudTextField @bind-Value="_formModel.Contact" For="@(() => _formModel.Contact)"
                          Label="Contact (Optional)" Lines="2" Class="mt-3" />

            <MudSelect T="int?" @bind-Value="_formModel.BandId" Label="Performing Band" For="@(() => _formModel.BandId)" Required="true" RequiredError="Band is required." Class="mt-3">
                @if (_availableBands.Any())
                {
                    foreach (var band in _availableBands)
                    {
                        <MudSelectItem Value="@((int?)band.Id)">@band.Name</MudSelectItem>
                    }
                }
                else
                {
                    <MudText Color="Color.Warning" Class="pa-2">No bands available. Please create a band first.</MudText>
                }
            </MudSelect>

            @if (_isEditMode && _formModel.LinkedSetlist != null)
            {
                <MudTextField Value="@_formModel.LinkedSetlist.Name" Label="Assigned Setlist (Read-Only)" ReadOnly="true" Variant="Variant.Outlined" Class="mt-3"
                              HelperText="To change the setlist, edit the Setlist entity and link it to this concert." />
            }
            else if (_isEditMode)
            {
                <MudTextField Value="@("None")" Label="Assigned Setlist (Read-Only)" ReadOnly="true" Variant="Variant.Outlined" Class="mt-3"
                              HelperText="No setlist is currently assigned. Edit a Setlist to link it." />
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@(!_isValid || _formModel.BandId == null)">Save Concert</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; } 

    [Parameter]
    public ConcertData? ConcertToEdit { get; set; }

    // Internal helper class for the form model
    private class ConcertFormModel
    {
        public int Id { get; set; }
        public string Venue { get; set; } = string.Empty;
        public DateTime? SelectedDate { get; set; } // For MudDatePicker
        public TimeSpan? SelectedTime { get; set; } // For MudTimePicker
        public string? Contact { get; set; }
        public int? BandId { get; set; }
        public SetlistData? LinkedSetlist { get; set; }

        // Helper to combine Date and Time
        public DateTime? GetCombinedDateTime()
        {
            if (SelectedDate.HasValue && SelectedTime.HasValue)
            {
                return SelectedDate.Value.Date + SelectedTime.Value;
            }
            return null;
        }
    }

    private string _title = "";
    private MudForm? _form;
    private bool _isValid;
    private ConcertFormModel _formModel = new();
    private IEnumerable<BandData> _availableBands = new List<BandData>();
    private bool _isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        _availableBands = await BandsClient.GetBandsAsync() ?? new List<BandData>();

        if (ConcertToEdit == null) // Create mode
        {
            _title = "Schedule New Concert";
            _isEditMode = false;
            _formModel = new ConcertFormModel()
                {
                    SelectedDate = DateTime.Today, // Default date
                    SelectedTime = DateTime.Now.TimeOfDay // Default time
                };
        }
        else // Edit mode
        {
            _title = $"Edit Concert: {ConcertToEdit.Venue}";
            _isEditMode = true;
            _formModel = new ConcertFormModel
                {
                    Id = ConcertToEdit.Id,
                    Venue = ConcertToEdit.Venue,
                    SelectedDate = ConcertToEdit.Date.Date, // Extract Date part
                    SelectedTime = ConcertToEdit.Date.TimeOfDay, // Extract Time part
                    Contact = ConcertToEdit.Contact,
                    BandId = ConcertToEdit.BandId,
                    LinkedSetlist = ConcertToEdit.Setlist
                };
        }
    }

    private async Task Submit()
    {
        if (_form == null) return;
        await _form.Validate();
        if (!_isValid || _formModel.BandId == null) return;

        DateTime? combinedDateTime = _formModel.GetCombinedDateTime();
        if (!combinedDateTime.HasValue)
        {
            Snackbar.Add("Date and Time are required.", Severity.Error);
            return;
        }

        try
        {
            if (!_isEditMode) // New concert
            {
                var createDto = new CreateConcertData
                    {
                        Venue = _formModel.Venue,
                        Date = combinedDateTime.Value, // Use combined value
                        Contact = _formModel.Contact,
                        BandId = _formModel.BandId
                    };
                await ConcertsClient.CreateConcertAsync(createDto);
                Snackbar.Add("Concert scheduled successfully!", Severity.Success);
            }
            else // Existing concert
            {
                var updateDto = new ConcertData
                    {
                        Id = _formModel.Id,
                        Venue = _formModel.Venue,
                        Date = combinedDateTime.Value, // Use combined value
                        Contact = _formModel.Contact,
                        BandId = _formModel.BandId,
                        BandName = ConcertToEdit?.BandName,
                        SetlistId = ConcertToEdit?.SetlistId,
                        Setlist = ConcertToEdit?.Setlist
                    };
                await ConcertsClient.UpdateConcertAsync(_formModel.Id, updateDto);
                Snackbar.Add("Concert updated successfully!", Severity.Success);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving concert: {ex.Message}", Severity.Error);
        }
    }

    void Cancel() => MudDialog.Cancel();
}